@using NetBanking.Core.Application.ViewModels.Client;
@model GetAllProductsByClientViewModel;
@{
    ViewData["Title"] = "ViewProducts";
}

<link rel="stylesheet" href="~/css/creditcard.css" />




<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>

@Html.ValidationSummary(false, "", new { @class = "text-danger" })
@if (ViewBag.Error == "Se ha borrado la tarjeta de credito")
{
    <script>
        Swal.fire({
            icon: 'success',
            title: 'Trabajo éxitoso!',
            text: '@ViewBag.Error',
            showConfirmButton: true,
            timer: 5000
        });
    </script>
}

<ul class="nav justify-content-end">
    <li class="nav-item">
        <a class="btn btn-info" asp-controller="Admin" asp-action="Index" style="margin-left: 20px;">Volver Atras</a>
    </li>
</ul>


@if (Model.SavingsAccounts.Count != 0)
{

    <h1 class="mb-4 text-center text-light"> Cuenta de Ahorro <img src="~/Iconos/ahorros (1).png" style="width: 70px; height: 70px; margin-left: 7px;" /></h1>
    <div class="container mt-5" style="margin-top: 10px;">
        <div class="row justify-content-center">
            @foreach (var item in Model.SavingsAccounts)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <img src="https://i.imgur.com/8ANWXql.png" width="20" height="20">
                                <img src="https://i.imgur.com/SsTSozr.png" width="40">
                            </div>
                            <div class="mt-3">
                                @if(item.IsMain)
                                {  
                                    <strong class="light">Cuenta Principal</strong>
                                }
                                <span class="mr-3">@item.Id</span>
                            </div>
                            <div class="d-flex justify-content-between card-details mt-3 mb-3">
                                <div class="d-flex flex-column">
                                    <span class="light">Savings Account</span>
                                    <span>Cliente</span>
                                </div>
                                <div class="d-flex flex-column">
                                    <span class="light">Monto</span>
                                    <span>$ @item.Amount</span>
                                </div>
                            </div>
                            <div class="d-flex">
                                <div class="d-flex">
                                    <button class="badge rounded-pill text-bg-warning AddAmountSavingAccount" data-route-id="@item.Id">Agregar monto</button>
                                </div>
                                <div class="d-flex">
                                    <button class="badge rounded-pill text-bg-danger eliminarSavingAccount" data-route-id="@item.Id">Eliminar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (Model.Loans.Count != 0)
{
    <h1 class="mb-4 text-center text-light" style="margin-top: 50px;"> Prestamo <img src="~/Iconos/banco.png" style="width: 70px; height: 70px; margin-left: 7px;" /></h1>
    <div class="container mt-5" style="margin-top: 10px;">
        <div class="row justify-content-center">
            @foreach (var item in Model.Loans)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <img src="https://i.imgur.com/8ANWXql.png" width="20" height="20">
                                <img src="https://i.imgur.com/SsTSozr.png" width="40">
                            </div>
                            <div class="mt-3">
                                <span class="mr-3">@item.Id</span>
                            </div>
                            <div class="d-flex justify-content-between card-details mt-3 mb-3">
                                <div class="d-flex flex-column">
                                    <span class="light">Credit Card</span>
                                    <span>Cliente</span>
                                </div>
                                <div class="d-flex flex-column">
                                    <span class="light">Monto</span>
                                    <span>$ @item.Amount</span>
                                </div>
                            </div>
                            <div class="d-flex">
                                <button class="badge rounded-pill text-bg-danger eliminarLoan" data-route-id="@item.Id">Eliminar</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
@if (Model.CreditCards.Count != 0)
{
    <h1 class="mb-4 text-center text-light" style="margin-top: 50px;"> Tarjeta de credito <img src="~/Iconos/tarjeta-de-credito.png" style="width: 70px; height: 70px; margin-left: 7px;" /></h1>
    <div class="container mt-5" style="margin-top: 10px;">
        <div class="row justify-content-center">
            @foreach (var item in Model.CreditCards)
            {
                <div class="col-md-4 mb-4">
                    <div class="card custom-card">
                        <!-- Añade una clase personalizada al card -->
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <img src="https://i.imgur.com/8ANWXql.png" width="20" height="20">
                                <img src="https://i.imgur.com/SsTSozr.png" width="40">
                            </div>
                            <div class="mt-3">
                                <span class="mr-3">@item.Id</span>
                            </div>
                            <div class="d-flex justify-content-between card-details mt-3 mb-3">
                                <div class="d-flex flex-column">
                                    <span class="light">Credit Card</span>
                                    <span>Cliente</span>
                                </div>
                                <div class="d-flex flex-column">
                                    <span class="light">Monto</span>
                                    <span>$ @item.Amount</span>
                                </div>
                            </div>
                            <div class="d-flex">
                                <button class="badge rounded-pill text-bg-danger eliminarLink" data-route-id="@item.Id">Eliminar</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

}


@if (Model.CreditCards.Count == 0 && Model.SavingsAccounts.Count == 0 && Model.Loans.Count == 0)
{
    <div class="d-flex justify-content-center container text-white mt-5">
        <div class="card p-2 px-3 py-3">
            <div class="d-flex justify-content-between align-items-center"><img src="https://i.imgur.com/8ANWXql.png" width="20" height="20"><img src="https://i.imgur.com/SsTSozr.png" width="40"></div>
            <div class="mt-3"><span class="mr-3">1234 </span><span class="mr-3"> **** </span><span class="mr-3"> **** </span><span class="mr-2"> 0000 </span></div>
            <div class="d-flex justify-content-between card-details mt-3 mb-3">
                <div class="d-flex flex-column"><span class="light">Card Holder</span><span>No tiene Productos registrados</span></div>
                <div class="d-flex flex-row">
                    <div class="d-flex flex-column mr-3"><span class="light">Expired</span><span>00/00</span></div>
                    <div class="d-flex flex-column"><span class="light">CVV</span><span>000</span></div>
                </div>
            </div>
        </div>
    </div>
}



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>





<script>
    document.querySelectorAll('.AddAmountSavingAccount').forEach(function (link) {
        link.addEventListener('click', async function (event) {
            event.preventDefault();

            var accountId = link.getAttribute('data-route-id'); // Obtener el ID directamente del botón
            link.disabled = true;

            const { value: id, isConfirmed } = await Swal.fire({
                html:
                    '<input id="swal-input" class="swal2-input" placeholder="Enter the amount">',
                focusConfirm: false,
                preConfirm: () => {
                    return document.getElementById('swal-input').value;
                },
                confirmButtonText: 'Aceptar',
                showCancelButton: true,
                cancelButtonText: 'Cancelar',
                customClass: {
                    confirmButton: 'btn-custom-color',
                    cancelButton: 'btn-custom-color'
                }
            });

            if (isConfirmed) {
                const amount = document.getElementById('swal-input').value;

                fetch(`/Admin/AddAmountSavingsAccount?Id=${accountId}&amount=${amount}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Monto agregado a la Cuenta de Ahorro', 'Actualice la pagina', 'success');
                        } else {
                            Swal.fire('Error', 'No se pudo agregar el monto a la cuenta', 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', 'Hubo un problema al procesar la solicitud', 'error');
                    })
                    .finally(() => {
                        link.disabled = false;
                    });
            } else {
                Swal.fire('Cancelado', '', 'info');
                link.disabled = false;
            }
        });
    });

</script>


<script>
    document.querySelectorAll('.eliminarSavingAccount').forEach(function (link) {
        link.addEventListener('click', async function (event) {
            event.preventDefault();

            var accountId = link.getAttribute('data-route-id');
            link.disabled = true;

            const { value: id, isConfirmed } = await Swal.fire({
                input: "text",
                inputValue: accountId,
                inputLabel: "¿Seguro que desea eliminar la cuenta de ahorro?",
                inputPlaceholder: "Enter the account number",
                showCancelButton: true,
                confirmButtonText: 'Aceptar',
                cancelButtonText: 'Cancelar',
                customClass: {
                    confirmButton: 'btn-custom-color', // Clase CSS personalizada para el botón Aceptar
                    cancelButton: 'btn-custom-color' // Clase CSS personalizada para el botón Cancelar
                }
            });

            if (isConfirmed) {
                fetch(`/Admin/DeleteSavingsAccount/${id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // La operación fue exitosa, activa el modal de éxito
                            Swal.fire('Cuenta de Ahorro eliminada', 'Actualice la pagina', 'success');
                        } else {
                            // La operación falló, muestra un mensaje de error
                            Swal.fire('No se puede eliminar la Cuenta Principal', '', 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error', 'Hubo un problema al procesar la solicitud', 'error');
                    })
                    .finally(() => {
                        link.disabled = false;
                    });
            } else {
                Swal.fire('Cancelado', '', 'info');
                // Habilita nuevamente el botón Eliminar si se cancela la operación
                link.disabled = false;
            }
        });
    });

</script>


<script>
    document.querySelectorAll('.eliminarLoan').forEach(function (link) {
        link.addEventListener('click', async function (event) {
            event.preventDefault();

            var accountId = link.getAttribute('data-route-id');
            link.disabled = true;

            const { value: id, isConfirmed } = await Swal.fire({
                input: "text",
                inputValue: accountId,
                inputLabel: "¿Seguro que desea eliminar el préstamo?",
                inputPlaceholder: "Enter the account number",
                showCancelButton: true,
                confirmButtonText: 'Aceptar',
                cancelButtonText: 'Cancelar',
                customClass: {
                    confirmButton: 'btn-custom-color', // Clase CSS personalizada para el botón Aceptar
                    cancelButton: 'btn-custom-color' // Clase CSS personalizada para el botón Cancelar
                }
            });

            if (isConfirmed) {
                fetch(`/Admin/DeleteLoan/${id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // La operación fue exitosa, activa el modal de éxito
                            Swal.fire('Prestamo cancelado', 'Actualice la pagina', 'success');
                        } else {
                            Swal.fire('No se puede eliminar el prestamo', '', 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error al eliminar el prestamo', 'El usuario tiene una deuda pendiente', 'error');
                    })
                    .finally(() => {
                        link.disabled = false;
                    });
            } else {
                Swal.fire('Cancelado', '', 'info');
                // Habilita nuevamente el botón Eliminar si se cancela la operación
                link.disabled = false;
            }
        });
    });

</script>




<script>
    document.querySelectorAll('.eliminarLink').forEach(function (link) {
        link.addEventListener('click', async function (event) {
            event.preventDefault();

            var accountId = link.getAttribute('data-route-id');

            // Desactiva temporalmente el botón Eliminar para evitar clics repetidos
            link.disabled = true;

            const { value: id, isConfirmed } = await Swal.fire({
                input: "text",
                inputValue: accountId,
                inputLabel: "¿Seguro que desea cancelar la tarjeta de credito?",
                inputPlaceholder: "Enter the account number",
                showCancelButton: true,
                confirmButtonText: 'Aceptar',
                cancelButtonText: 'Cancelar'
            });

            if (isConfirmed) {
                fetch(`/Admin/DeleteCreditCard/${id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        Swal.fire('Tarjeta de crédito cancelada', '', 'success');
                    })
                    .catch(error => {
                        Swal.fire('Error al eliminar la tarjeta de crédito', 'El usuario tiene una deuda pendiente', 'error');
                    })
                    .finally(() => {
                        // Habilita nuevamente el botón Eliminar después de completar la solicitud
                        link.disabled = false;
                    });
            } else {
                Swal.fire('Cancelado', '', 'info');
                // Habilita nuevamente el botón Eliminar si se cancela la operación
                link.disabled = false;
            }
        });
    });
</script>